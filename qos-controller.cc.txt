/*
 * quos-controller.cc
 *
 *  Created on: 5 feb 2020
 *      Author: openflow
 */
/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2016 University of Campinas (Unicamp)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author:  Luciano Chaves <luciano@lrc.ic.unicamp.br>
 */

#define INF 99999

#include <ns3/network-module.h>
#include <ns3/internet-module.h>
#include "qos-controller.h"

#include <stdio.h>

NS_LOG_COMPONENT_DEFINE ("QosController");
NS_OBJECT_ENSURE_REGISTERED (QosController);

QosController::QosController ()
{
	NS_LOG_FUNCTION (this);
	SaveServiceEntry("10.1.3.1",std::list<int> {1}); //eMBB
	SaveServiceEntry("10.1.3.2",std::list<int> {0,2,2}); //mMTC
	SaveServiceEntry("10.1.3.3",std::list<int> {1});

	if(GetRouterConfiguration()){
		std::cout<<"Router config extract from file"<<std::endl;
	}else{
		std::cout<<"Router config NOT extract from file"<<std::endl;
	}

}

QosController::~QosController ()
{
	NS_LOG_FUNCTION (this);
}

void
QosController::DoDispose ()
{
	NS_LOG_FUNCTION (this);

	m_arpTable.clear ();
	OFSwitch13Controller::DoDispose ();
}

TypeId
QosController::GetTypeId (void)
{
	static TypeId tid = TypeId ("ns3::QosController")
    																																																																																																																																																																																																																																																																																																																																																																																																																																																																												.SetParent<OFSwitch13Controller> ()
																																																																																																																																																																																																																																																																																																																																																																																																																																																																													.SetGroupName ("OFSwitch13")
																																																																																																																																																																																																																																																																																																																																																																																																																																																																													.AddConstructor<QosController> ()
																																																																																																																																																																																																																																																																																																																																																																																																																																																																													.AddAttribute ("EnableMeter",
																																																																																																																																																																																																																																																																																																																																																																																																																																																																															"Enable per-flow mettering.",
																																																																																																																																																																																																																																																																																																																																																																																																																																																																															BooleanValue (false),
																																																																																																																																																																																																																																																																																																																																																																																																																																																																															MakeBooleanAccessor (&QosController::m_meterEnable),
																																																																																																																																																																																																																																																																																																																																																																																																																																																																															MakeBooleanChecker ())
																																																																																																																																																																																																																																																																																																																																																																																																																																																																															.AddAttribute ("MeterRate",
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	"Per-flow meter rate.",
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	DataRateValue (DataRate ("256Kbps")),
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	MakeDataRateAccessor (&QosController::m_meterRate),
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	MakeDataRateChecker ())
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																	.AddAttribute ("LinkAggregation",
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																			"Enable link aggregation.",
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																			BooleanValue (true),
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																			MakeBooleanAccessor (&QosController::m_linkAggregation),
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																			MakeBooleanChecker ())
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																			.AddAttribute ("ServerIpAddr",
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					"Server IPv4 address.",
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					AddressValue (Address (Ipv4Address ("10.1.1.1"))),
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					MakeAddressAccessor (&QosController::m_serverIpAddress),
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					MakeAddressChecker ())
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					.AddAttribute ("ServerTcpPort",
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																							"Server TCP port.",
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																							UintegerValue (9),
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																							MakeUintegerAccessor (&QosController::m_serverTcpPort),
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																							MakeUintegerChecker<uint64_t> ())
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																							.AddAttribute ("ServerMacAddr",
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									"Server MAC address.",
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									AddressValue (Address (Mac48Address ("00:00:00:00:00:01"))),
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									MakeAddressAccessor (&QosController::m_serverMacAddress),
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									MakeAddressChecker ())
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																									;
	return tid;
}

void
QosController::SetWeight(std::string weight){
	InputWeight = weight;
}

void
QosController::HandshakeSuccessful (Ptr<const RemoteSwitch> swtch)
{
	NS_LOG_FUNCTION (this << swtch);
	std::cout<<"Vediamo "<< swtch->GetDpId() <<std::endl;


	SendBarrierRequest (swtch);

	ConfigureBorderSwitch_FUB(swtch);
	SendBarrierRequest (swtch); //Per tentare di fargli eseguire tutti i comandi ricevuti prima di questo e poi gli altri, ma non funziona



	if(!g.existNode(swtch->GetDpId())){
		/*In caso un nuovo switch si collega al controller, il grafo che rappresenta la rete diventa obsoleto
		 *Vanno quindi resi nulli il grafo e la matrice dei cammini
		 *Rifatta l'esplorazione, rifatto il blocco delle porte della rete, e rigenerata la matrice dei cammini
		 */
		std::cout<<"Conosciuto: "<< swtch->GetDpId() <<std::endl;

		//Aggiunta dello switch come nodo del grafo
		uint64_t id = swtch->GetDpId();
		g.addNode(id);

		nSwitch++;

		networkExplorerState=1;
		SendBarrierRequest (swtch);
		switchNetworkExplore(swtch);
		SendBarrierRequest (swtch);
	}
}

ofl_err
QosController::HandleBarrierReply (
		struct ofl_msg_header *msg, Ptr<const RemoteSwitch> swtch,
		uint32_t xid){
	std::cout<<"Barrier Reply with xid: "<< xid<<std::endl;

	// All handlers must free the message when everything is ok
	ofl_msg_free ((struct ofl_msg_header*)msg, 0);
	return 0;
}


ofl_err
QosController::HandlePacketIn (
		struct ofl_msg_packet_in *msg, Ptr<const RemoteSwitch> swtch,
		uint32_t xid)
{
	NS_LOG_FUNCTION (this << swtch << xid);

	//std::cout << "inzio gestione packet in" << std::endl;
	char *msgStr =
			ofl_structs_match_to_string ((struct ofl_match_header*)msg->match, 0);
	NS_LOG_DEBUG ("Packet in match: " << msgStr);
	free (msgStr);

	if (msg->reason == OFPR_ACTION)
	{
		// Get Ethernet frame type
		uint16_t ethType = ExtractEthernetType((struct ofl_match*)msg->match);

		if (ethType == ArpL3Protocol::PROT_NUMBER)
		{
			return HandleArpPacketIn (msg, swtch, xid);
		}
		else if (ethType == Ipv4L3Protocol::PROT_NUMBER)
		{
			//Protocollo di servizio del pacchetto
			uint8_t ipProtocolId = ExtractIpProtocolID((struct ofl_match*)msg->match);
			if(ipProtocolId == UdpL4Protocol::PROT_NUMBER){ //Sarà un pacchetto udp
				return HandleUDPPacketIn(msg, swtch, xid);
			}
			if(ipProtocolId == TcpL4Protocol::PROT_NUMBER){ //Sarà un pacchetto tcp
				return HandleConnectionRequest (msg, swtch, xid);
			}
		}
		else{//Pacchetto NON ancora gestito
			std::cout<< "altro tipo di pacchetto" << std::endl;
		}
	}

	// All handlers must free the message when everything is ok
	ofl_msg_free ((struct ofl_msg_header*)msg, 0);
	return 0;
}



void
QosController::ConfigureBorderSwitch (Ptr<const RemoteSwitch> swtch)
{
	NS_LOG_FUNCTION (this << swtch);
}

void
QosController::ConfigureAggregationSwitch (Ptr<const RemoteSwitch> swtch)
{
	NS_LOG_FUNCTION (this << swtch);
}

void
QosController::ConfigureBorderSwitch_FUB (Ptr<const RemoteSwitch> swtch)
{
	std::cout << "configureBorderSwitch_FUB" << std::endl;
	NS_LOG_FUNCTION (this << swtch);

	// For packet-in messages, send only the first 128 bytes to the controller
	DpctlExecute (swtch, "set-config miss=128");
	/*----------------------------------------------------------------------*/
	//CONCENTRATI QUI
	//std::cout << "Provo ad impostare la regola" << std::endl;

	// Redirect ARP requests to the controller
	DpctlExecute (swtch, "flow-mod cmd=add,table=0,prio=20 "
			"eth_type=0x0806,arp_op=1 apply:output=ctrl");

	//Redirect ARP Reply from any Host to Controller
	DpctlExecute (swtch, "flow-mod cmd=add,table=0,prio=20 "
			"eth_type=0x0806,arp_op=2 apply:output=ctrl");

	//Network explorer packet redirect
	DpctlExecute(swtch,"flow-mod cmd=add,table=0,prio=20 "
			"eth_type=0x0800,ip_proto=17,udp_dst=11000 apply:output=ctrl");

	DpctlExecute(swtch,"flow-mod cmd=add,table=0,prio=1 "
			"eth_type=0x0800 apply:output=ctrl");
	//std::cout << "Regola Impostata" << std::endl;
}

ofl_err
QosController::HandlePortStatus (
		struct ofl_msg_port_status *msg, Ptr<const RemoteSwitch> swtch,
		uint32_t xid){
	std::cout<<"Arrivato un Port Status"<<std::endl;

	uint32_t estrattoreBinario = 1023;
	uint32_t estratto = 0;
	estratto = (msg->desc->supported)&(estrattoreBinario);
	std::cout<<"estratto: "<<estratto<<std::endl;

	uint64_t capacitaMassimaLink=0;

	switch(estratto){
	case 1:
		std::cout<<"Max 10Mb/s"<<std::endl;
		capacitaMassimaLink = 10;
		break;
	case 2:
		std::cout<<"Max 10Mb/s"<<std::endl;
		capacitaMassimaLink = 10;
		break;
	case 4:
		std::cout<<"Max 100Mb/s"<<std::endl;
		capacitaMassimaLink = 100;
		break;
	case 8 :
		std::cout<<"Max 100Mb/s"<<std::endl;
		capacitaMassimaLink = 100;
		break;
	case 16:
		std::cout<<"Max 1000Mb/s"<<std::endl;
		capacitaMassimaLink = 1000;
		break;
	case 32:
		std::cout<<"Max 1000Mb/s"<<std::endl;
		capacitaMassimaLink = 1000;
		break;
	case 64:
		std::cout<<"Max 10000Mb/s"<<std::endl;
		capacitaMassimaLink = 10000;
		break;
	case 128:
		std::cout<<"Max 40000Mb/s"<<std::endl;
		capacitaMassimaLink = 40000;
		break;
	case 256:
		std::cout<<"Max 100000Mb/s"<<std::endl;
		capacitaMassimaLink = 100000;
		break;
	case 512:
		std::cout<<"Max 1000000Mb/s"<<std::endl;
		capacitaMassimaLink = 1000000;
		break;
	}

	uint64_t switchSorgente = swtch->GetDpId();
	uint64_t idPortaDaModificare = msg->desc->port_no;

	std::map<std::pair<uint64_t,uint64_t>,Link> nodoMapLink;
	nodoMapLink = g.getNode(switchSorgente).getLinks();
	std::map<std::pair<uint64_t,uint64_t>,Link>::iterator it = nodoMapLink.begin();
	bool trovato = false;
	while(!trovato && (it != nodoMapLink.end())){
		if(it->second.getPort()==idPortaDaModificare){
			trovato = true;
			std::cout<<"Link trovato"<<std::endl;
		}else{
			++it;
		}
	}

	it->second.setMaxCapabiliti(capacitaMassimaLink);

	//Sovrascrive il vecchio link col "nuovo" con capacita diversa
	g.addLink(it->second);

	std::cout<<"Capacita finale: "<<it->second.getMaxCapability()<<std::endl;

	ofl_msg_free ((struct ofl_msg_header*)msg, 0);
	return 0;
}



void
QosController::ConfigureAggregationSwitch_FUB (Ptr<const RemoteSwitch> swtch)
{
	NS_LOG_FUNCTION (this << swtch);

}

ofl_err
QosController::HandleUDPPacketIn(
		struct ofl_msg_packet_in *msg, Ptr<const RemoteSwitch> swtch,
		uint32_t xid){
	std::cout<<"UDP!!!!!"<<std::endl;
	uint16_t udp_dst_port= ExtractUdpPort(OXM_OF_UDP_DST,(struct ofl_match*)msg->match);;

	if(udp_dst_port == networkExplorerUdpPort){ //è un pacchetto di esplorazione di rete
		uint16_t udp_src_port = ExtractUdpPort(OXM_OF_UDP_SRC,(struct ofl_match*)msg->match);
		uint32_t inPort = ExtractInPort((struct ofl_match*)msg->match);

		std::cout<< "pacchetto explorer UDP da: "<< udp_src_port - networkExplorerUdpPort << " in port: "<< inPort << " dello switch: "<< swtch->GetDpId()<< std::endl;

		uint64_t fromSwitch = swtch->GetDpId();
		uint64_t toSwitch = udp_src_port - networkExplorerUdpPort;
		uint32_t portUseInFrom = inPort;

		if(!g.existLink(fromSwitch,toSwitch)){
			portSwitchConfiguration(fromSwitch,portUseInFrom);
			//fromSwitch ha ricevuto un pacchetto per una certa porta, da uno switch a lui sconosciuto
			//per quella stessa porta sarà reinviato un pacchetto explorere di fromSwitch
			//che sarà ricevuto dal nuovo switch
			uint64_t cost=1;
			Link link(fromSwitch,toSwitch,portUseInFrom,cost);
			g.addLink(link);
			if(!g.existLink(toSwitch,fromSwitch)){
				std::cout<<"Pacchetto con impostazione inPort"<<std::endl;
				std::cout<< "invio pacchetto explorer UDP per: "<< toSwitch << " in port: "<< inPort << " de switch: "<< fromSwitch<< std::endl;
				switchNetworkExplore(GetRemoteSwitch(fromSwitch),inPort);
			}
		}
	}else{
		//Gestisci altri pacchetti udp
		//std::cout<< "pacchetto generico UDP (NON EXPLORER)" << std::endl;
	}
	// All handlers must free the message when everything is ok
	ofl_msg_free ((struct ofl_msg_header*)msg, 0);
	//std::cout<< "fine gestione arp packet" << std::endl;
	return 0;
}

/*ARP Handler*/
ofl_err
QosController::HandleArpPacketIn (
		struct ofl_msg_packet_in *msg, Ptr<const RemoteSwitch> swtch,
		uint32_t xid){
	NS_LOG_FUNCTION (this << swtch << xid);
	std::cout << "HandlerArpPacket" << std::endl;

	// Get ARP operation
	uint16_t arpOp = ExtractArpOperationCode((struct ofl_match*)msg->match);

	// Get input port
	uint32_t inPort = ExtractInPort((struct ofl_match*)msg->match);

	// Get source and target IP address
	Ipv4Address srcIp, dstIp;
	srcIp = ExtractIpv4Address (OXM_OF_ARP_SPA, (struct ofl_match*)msg->match);
	dstIp = ExtractIpv4Address (OXM_OF_ARP_TPA, (struct ofl_match*)msg->match);

	// Get Source MAC address
	Mac48Address srcMac = ExtractMacAddress(OXM_OF_ARP_SHA,(struct ofl_match*)msg->match);
	//Save, if not exist already, ArpEntry
	SaveArpEntry(srcIp,srcMac);

	//Save, if not exist already, IpDestEntry
	SaveIpDestEntry(srcIp,swtch->GetDpId());

	//Generate ad IP based flow to the new entry, to redirect the destination traffic
	std::ostringstream flowDest;
	flowDest << "flow-mod table=0,cmd=add eth_type=0x800,ip_dst="<<srcIp<<" apply:output="<<inPort;
	DpctlExecute(swtch,flowDest.str());

	if (arpOp == ArpHeader::ARP_TYPE_REQUEST)
	{
		if((ipExplorerTrigger == dstIp)){ //è un pacchetto di trigger iniziale

			if((networkExplorerState==1)){ //only the first packet-in enable the exploring
				std::cout<<"Prima esplorazione"<<std::endl;
				NetworkExplorerFunction();
				networkExplorerState=2;
			}else if(networkExplorerState==2){
				std::cout<<"Inizio ricerca dei routers"<<std::endl;
				searchMacOfRouters();
				std::cout<<"Fine ricerca dei routers"<<std::endl;
				networkExplorerState = 3;
			}else if(networkExplorerState==3){
				makePathByTwoRouter();
				networkExplorerState = 0;

			}
		}else{
			std::cout << "Al lavoro!" << std::endl;

			Ipv4Address serverIp = Ipv4Address::ConvertFrom (m_serverIpAddress);
			Mac48Address serverMac = Mac48Address::ConvertFrom (m_serverMacAddress);

			uint8_t replyData[64];

			if(ExistArpEntry(dstIp)){// In caso di ArpEntry presente, mi è stato chiesto il MAC di un host che conosco

				Mac48Address dstMac = GetArpEntry(dstIp);
				Ptr<Packet> pkt = CreateArpReply(dstMac,dstIp,srcMac,srcIp);
				NS_ASSERT_MSG(pkt->GetSize() == 64, "Invalid packet size.");
				pkt->CopyData(replyData,64);

				struct ofl_action_output *action =
						(struct ofl_action_output*)xmalloc (sizeof (struct ofl_action_output));

				this->shortActionOuputCreator(action, OFPP_IN_PORT, 0);//rimandalo alla porta di provenienza del messaggio che non hai saputo gestire

				struct ofl_msg_packet_out reply;
				reply.header.type = OFPT_PACKET_OUT;
				reply.buffer_id = OFP_NO_BUFFER;
				reply.in_port = inPort;
				reply.data_length = 64;
				reply.data = &replyData[0];
				reply.actions_num = 1;
				reply.actions = (struct ofl_action_header**)&action;
				SendToSwitch (swtch, (struct ofl_msg_header*)&reply, GetNextXid());
				free (action);
				ServiceManagerIPbased(g,srcIp,dstIp);
			}else{//In caso di ArpEntry non trovata, ossia, mi è stato chiesto il MAC di un host che non conosco
				std::cout << "ArpEntry NON trovata, vado in ricerca" <<std::endl;

				Ptr<Packet> pkt = CreateArpRequest(serverMac, serverIp, dstIp);
				NS_ASSERT_MSG(pkt->GetSize() == 64, "Invalid packet size.");
				pkt->CopyData(replyData,64);//copia pkt in replydata che ha una lunghezza di 64 byte

				std::list<uint64_t>::iterator itr;
				std::list<uint64_t> lista = g.getNodeList();
				for (itr = lista.begin(); itr != lista.end(); ++itr){
					struct ofl_action_output *action =
							(struct ofl_action_output*)xmalloc (sizeof (struct ofl_action_output));
					this->shortActionOuputCreator(action, OFPP_FLOOD, 0);

					// Send the ARP Reply within an OpenFlow PacketOut message
					struct ofl_msg_packet_out reply;
					reply.header.type = OFPT_PACKET_OUT;
					reply.buffer_id = OFP_NO_BUFFER;
					reply.in_port = OFPP_CONTROLLER;//da chi proviene il messaggio packet_out
					reply.data_length = 64;
					reply.data = &replyData[0];
					reply.actions_num = 1;
					reply.actions = (struct ofl_action_header**)&action;
					SendToSwitch(GetRemoteSwitch(*itr), (struct ofl_msg_header*)&reply, xid);
				}
			}
		}
	}else{
		std::cout<<"Ho ricevuto una reply"<<std::endl;
	}

	ofl_msg_free ((struct ofl_msg_header*)msg, 0);
	//std::cout<< "fine gestione arp packet" << std::endl;
	return 0;
}

/******************************************************************/

ofl_err
QosController::HandleConnectionRequest (
		struct ofl_msg_packet_in *msg, Ptr<const RemoteSwitch> swtch,
		uint32_t xid)
{
	NS_LOG_FUNCTION (this << swtch << xid);

	static uint32_t connectionCounter = 0;
	connectionCounter++;

	struct ofl_match_tlv *tlv;
	Ipv4Address serverIp = Ipv4Address::ConvertFrom (m_serverIpAddress);
	Mac48Address serverMac = Mac48Address::ConvertFrom (m_serverMacAddress);

	// Get input port
	uint32_t inPort = ExtractInPort((struct ofl_match*)msg->match);

	// Get Source MAC address
	Mac48Address srcMac = ExtractMacAddress(OXM_OF_ETH_SRC,(struct ofl_match*)msg->match);

	// Get source and destination IP address
	Ipv4Address srcIp, dstIp;
	srcIp = ExtractIpv4Address (OXM_OF_IPV4_SRC, (struct ofl_match*)msg->match);
	dstIp = ExtractIpv4Address (OXM_OF_IPV4_DST, (struct ofl_match*)msg->match);

	// Get source and destination TCP ports
	uint16_t srcPort, dstPort;
	tlv = oxm_match_lookup (OXM_OF_TCP_SRC, (struct ofl_match*)msg->match);
	memcpy (&srcPort, tlv->value, OXM_LENGTH (OXM_OF_TCP_SRC));
	tlv = oxm_match_lookup (OXM_OF_TCP_DST, (struct ofl_match*)msg->match);
	memcpy (&dstPort, tlv->value, OXM_LENGTH (OXM_OF_TCP_DST));

	// Create an ARP request for further address resolution
	SaveArpEntry (srcIp, srcMac);
	uint8_t replyData[64];
	Ptr<Packet> pkt = CreateArpRequest (serverMac, serverIp, srcIp);
	NS_ASSERT_MSG (pkt->GetSize () == 64, "Invalid packet size.");
	pkt->CopyData (replyData, 64);

	struct ofl_action_output *arpAction =
			(struct ofl_action_output*)xmalloc (sizeof (struct ofl_action_output));
	arpAction->header.type = OFPAT_OUTPUT;
	arpAction->port = OFPP_IN_PORT;
	arpAction->max_len = 0;

	// Send the ARP request within an OpenFlow PacketOut message
	struct ofl_msg_packet_out arpRequest;
	arpRequest.header.type = OFPT_PACKET_OUT;
	arpRequest.buffer_id = OFP_NO_BUFFER;
	arpRequest.in_port = inPort;
	arpRequest.data_length = 64;
	arpRequest.data = &replyData[0];
	arpRequest.actions_num = 1;
	arpRequest.actions = (struct ofl_action_header**)&arpAction;

	SendToSwitch (swtch, (struct ofl_msg_header*)&arpRequest, 0);
	free (arpAction);

	// Check for valid service connection request
	NS_ASSERT_MSG (dstIp.IsEqual (serverIp) && dstPort == m_serverTcpPort,
			"Invalid IP address / TCP port.");

	// Select an internal server to handle this connection
	uint16_t serverNumber = 1 + (connectionCounter % 2);
	NS_LOG_INFO ("Connection " << connectionCounter <<
			" redirected to server " << serverNumber);

	// If enable, install the metter entry for this connection
	if (m_meterEnable)
	{
		std::ostringstream meterCmd;
		meterCmd << "meter-mod cmd=add,flags=1,meter=" << connectionCounter
				<< " drop:rate=" << m_meterRate.GetBitRate () / 1000;
		DpctlExecute (swtch, meterCmd.str ());
	}

	// Install the flow entry for this TCP connection
	std::ostringstream flowCmd;
	flowCmd << "flow-mod cmd=add,table=0,prio=1000 eth_type=0x0800,ip_proto=6"
			<< ",ip_src=" << srcIp
			<< "ip_dst=" << m_serverIpAddress
			<< ",tcp_dst=" << m_serverTcpPort
			<< ",tcp_src=" << srcPort;
	if (m_meterEnable)
	{
		flowCmd << " meter:" << connectionCounter;
	}
	flowCmd << " write:group=" << serverNumber;
	DpctlExecute (swtch, flowCmd.str ());

	// Create group action with server number
	struct ofl_action_group *action =
			(struct ofl_action_group*)xmalloc (sizeof (struct ofl_action_group));
	action->header.type = OFPAT_GROUP;
	action->group_id = serverNumber;

	// Send the packet out to the switch.
	struct ofl_msg_packet_out reply;
	reply.header.type = OFPT_PACKET_OUT;
	reply.buffer_id = msg->buffer_id;
	reply.in_port = inPort;
	reply.actions_num = 1;
	reply.actions = (struct ofl_action_header**)&action;
	reply.data_length = 0;
	reply.data = 0;
	if (msg->buffer_id == NO_BUFFER)
	{
		// No packet buffer. Send data back to switch
		reply.data_length = msg->data_length;
		reply.data = msg->data;
	}

	SendToSwitch (swtch, (struct ofl_msg_header*)&reply, GetNextXid());
	free (action);

	// All handlers must free the message when everything is ok
	ofl_msg_free ((struct ofl_msg_header*)msg, 0);
	return 0;
}
/***************************************************************************/

void
QosController::NetworkExplorerFunction(){
	std::cout<<"NetworkExplorerFunction"<<std::endl;
	std::list<uint64_t>::iterator itr;
	std::list<uint64_t> lista = g.getNodeList();
	std::cout<<"nodi di g: "<< g.getNodeList().size()<<std::endl;
	for (itr = lista.begin(); itr != lista.end(); ++itr){
		std::cout<<"Per: "<< (*itr) << std::endl;
		switchNetworkExplore(GetRemoteSwitch(*itr));
	}
	std::cout<<"FineNetworkExplorerFunction"<<std::endl;
}


int
QosController::switchNetworkExplore(Ptr<const RemoteSwitch> swtch){
	return switchNetworkExplore(swtch,OFPP_FLOOD);
}

int
QosController::switchNetworkExplore(Ptr<const RemoteSwitch> swtch, uint32_t outputSwitchPort){

	//std::cout<< "Inizio Network Explorer"<< std::endl;
	uint8_t pktExplorer[64];

	Ptr<Packet> pkt = CreateUdpExplorerPacket(swtch->GetDpId());

	pkt->CopyData(pktExplorer,64);

	struct ofl_action_output *action =
			(struct ofl_action_output*)xmalloc (sizeof (struct ofl_action_output));

	shortActionOuputCreator(action, outputSwitchPort ,0);

	struct ofl_msg_packet_out explorer;
	explorer.header.type=OFPT_PACKET_OUT;
	explorer.buffer_id=OFP_NO_BUFFER;
	explorer.in_port=OFPP_CONTROLLER;
	explorer.actions=(struct ofl_action_header**)&action;
	explorer.actions_num=1;
	explorer.data=&pktExplorer[0];
	explorer.data_length=64;

	std::cout<<"Inviato Explorer"<<std::endl;

	return SendToSwitch(swtch,(struct ofl_msg_header*)&explorer,GetNextXid());
}


Ptr<Packet>
QosController::CreateUdpExplorerPacket(uint64_t fromSwitchId){
	//Ipv4Address serverIp = Ipv4Address::ConvertFrom (m_serverIpAddress);
	//Mac48Address serverMac = Mac48Address::ConvertFrom (m_serverMacAddress);

	std::cout<< "Creo packetto UDP"<< std::endl;
	//uint8_t * hello;
	//uint8_t fromSwitchIdData = (uint8_t)fromSwitchId;
	//uint32_t helloSize=24;
	//hello = (uint8_t*)calloc(helloSize,sizeof(uint8_t));
	//uint8_t  hello[24] = "ciao";

	//reinterpret_cast<const uint8_t*> ("hello"), 5
	//Ptr<Packet> pktU = Create<Packet>(hello,helloSize);
	Ptr<Packet> pktU = Create<Packet>();

	UdpHeader udpH;
	udpH.SetSourcePort(networkExplorerUdpPort+fromSwitchId);
	udpH.SetDestinationPort(networkExplorerUdpPort);
	udpH.EnableChecksums();
	Ipv4Address src="10.1.1.1";
	Ipv4Address dst="10.1.1.1";
	udpH.InitializeChecksum(src,dst,UdpL4Protocol::PROT_NUMBER);
	Buffer buffer;
	//buffer.Serialize(hello,helloSize);

	pktU->AddHeader(udpH);

	Ipv4Header ipv4H;
	ipv4H.SetSource("10.1.1.1");
	ipv4H.SetDestination("10.1.1.1");
	ipv4H.SetTtl(64);
	ipv4H.SetDontFragment();
	ipv4H.SetProtocol(UdpL4Protocol::PROT_NUMBER);
	ipv4H.SetPayloadSize(UdpL4Protocol::PROT_NUMBER);

	pktU->AddHeader(ipv4H);

	// Ethernet header
	EthernetHeader eth (false);
	eth.SetSource ("00:00:00:90:01:01");
	eth.SetDestination ("00:00:00:90:02:01");
	if (pktU->GetSize () < 46)
	{
		uint8_t buffer[46];
		memset (buffer, 0, 46);
		Ptr<Packet> padd = Create<Packet> (buffer, 46 - pktU->GetSize ());
		pktU->AddAtEnd (padd);
	}
	eth.SetLengthType (Ipv4L3Protocol::PROT_NUMBER);
	pktU->AddHeader (eth);

	// Ethernet trailer
	EthernetTrailer trailer;
	if (Node::ChecksumEnabled ())
	{
		trailer.EnableFcs (true);
	}
	trailer.CalcFcs (pktU);
	pktU->AddTrailer (trailer);

	return pktU;
}

void QosController::searchMacOfRouters(){
	std::cout<<"searchMacOfRouters"<<std::endl;


	std::list<routerInfo>::iterator it;
	for(it = l_routerInfo.begin(); it != l_routerInfo.end(); ++it){
		Ptr<Packet> arpRequest = CreateArpRequest(hideMacServer,hideIpServer,(*it).esterno);

		uint8_t pktFinder[64];

		arpRequest->CopyData(pktFinder,64);

		struct ofl_action_output *action =
				(struct ofl_action_output*)xmalloc (sizeof (struct ofl_action_output));

		shortActionOuputCreator(action, OFPP_FLOOD ,0);

		struct ofl_msg_packet_out finder;
		finder.header.type=OFPT_PACKET_OUT;
		finder.buffer_id=OFP_NO_BUFFER;
		finder.in_port=OFPP_CONTROLLER;
		finder.actions=(struct ofl_action_header**)&action;
		finder.actions_num=1;
		finder.data=&pktFinder[0];
		finder.data_length=64;

		std::cout<<"Inviando Finder"<<std::endl;
		std::list<uint64_t>::iterator itr;
		std::list<uint64_t> lista = g.getNodeList();
		for (itr = lista.begin(); itr != lista.end(); ++itr){
			SendToSwitch(GetRemoteSwitch(*itr),(struct ofl_msg_header*)&finder,GetNextXid());
		}
	}

}

void
QosController::makePathByTwoRouter(){
	std::cout<<"makePathByTwoRouter"<<std::endl;

	std::list<routerInfo>::iterator it;
	for(it = l_routerInfo.begin(); it != l_routerInfo.end(); ++it){
		std::list<routerInfo>::iterator ita;
		for(ita = it; ita != l_routerInfo.end(); ++ita){
			if(((*it).esterno)!=((*ita).esterno)){
				std::cout<<"Mittente: "<<(*it).esterno<<std::endl;
				std::cout<<"Destinatario: "<<(*ita).esterno<<std::endl;
				uint64_t srcSwitch = GetIpDestEntry((*it).esterno);
				uint64_t dstSwitch = GetIpDestEntry((*ita).esterno);
				std::list<uint64_t> path = shortestPath(g,srcSwitch,dstSwitch);
				addFlowModToPathSwitch(path,((*it).esterno),((*ita).esterno),1);
		}
	}
}
}


void
QosController::portSwitchConfiguration(uint64_t switchDpId, uint32_t port){
	portSwitchConfiguration(GetRemoteSwitch(switchDpId),port);
}

void
QosController::portSwitchConfiguration(Ptr<const RemoteSwitch> swtch, uint32_t port){

	struct ofl_msg_port_mod pkt;
	pkt.header.type=OFPT_PORT_MOD;
	pkt.port_no=port;
	pkt.config=OFPPC_NO_FWD;
	pkt.mask=OFPPC_NO_FWD;
	pkt.advertise=0;

	std::cout << "inviato il blocco" << std::endl;

	SendToSwitch (swtch, (struct ofl_msg_header*)&pkt, GetNextXid());
}

/*****************************************************/
Ipv4Address
QosController::ExtractIpv4Address (uint32_t oxm_of, struct ofl_match* match)
{
	switch (oxm_of)
	{
	case OXM_OF_ARP_SPA:
	case OXM_OF_ARP_TPA:
	case OXM_OF_IPV4_DST:
	case OXM_OF_IPV4_SRC:
	{
		uint32_t ip;
		int size = OXM_LENGTH (oxm_of);
		struct ofl_match_tlv *tlv = oxm_match_lookup (oxm_of, match);
		memcpy (&ip, tlv->value, size);
		return Ipv4Address (ntohl (ip));
	}
	default:
		NS_ABORT_MSG ("Invalid IP field.");
	}
}
Mac48Address
QosController::ExtractMacAddress (uint32_t oxm_of, struct ofl_match* match){
	switch(oxm_of){
	case OXM_OF_ARP_SHA:
	case OXM_OF_ARP_SHA_W:
	case OXM_OF_ARP_THA:
	case OXM_OF_ARP_THA_W:
	{
		Mac48Address Mac;
		ofl_match_tlv* tlv = oxm_match_lookup (oxm_of, match);
		Mac.CopyFrom (tlv->value);
		return Mac;
	}
	default:
		NS_ABORT_MSG ("Invalid MAC field.");
	}

}

uint16_t
QosController::ExtractEthernetType (struct ofl_match* match){
	// Get Ethernet frame type
	uint16_t ethType; //16 bit perchè così dice OXM_OF_ETH_TYPE
	struct ofl_match_tlv *tlv = oxm_match_lookup (OXM_OF_ETH_TYPE, match);
	memcpy (&ethType, tlv->value, OXM_LENGTH (OXM_OF_ETH_TYPE));
	return ethType;
}

uint16_t
QosController::ExtractArpOperationCode(struct ofl_match* match){
	// Get ARP operation
	uint16_t arpOp;
	struct ofl_match_tlv *tlv = oxm_match_lookup (OXM_OF_ARP_OP, match);
	memcpy (&arpOp, tlv->value, OXM_LENGTH (OXM_OF_ARP_OP));
	return arpOp;
}

uint32_t
QosController::ExtractInPort(struct ofl_match* match){
	uint32_t inPort;
	struct ofl_match_tlv *tlv = oxm_match_lookup (OXM_OF_IN_PORT, match);
	memcpy (&inPort, tlv->value, OXM_LENGTH (OXM_OF_IN_PORT));
	return inPort;
}

uint8_t
QosController::ExtractIpProtocolID(struct ofl_match* match){
	uint8_t ipProtocolId; //8 bit perchè così dice OXM_OF_IP_PROTO
	struct ofl_match_tlv *tlv = oxm_match_lookup (OXM_OF_IP_PROTO,match);
	memcpy (&ipProtocolId, tlv->value, OXM_LENGTH (OXM_OF_IP_PROTO));
	return ipProtocolId;
}
uint16_t
QosController::ExtractUdpPort( uint32_t oxm_of , struct ofl_match* match){
	switch(oxm_of){
	case OXM_OF_UDP_SRC:
	case OXM_OF_UDP_DST:
	{
		uint16_t udp_port; //16 bit perchè così dice OXM_OF_UDP_*
		struct ofl_match_tlv *tlv = oxm_match_lookup (oxm_of, match);
		memcpy (&udp_port, tlv->value, OXM_LENGTH (oxm_of));
		return udp_port;
	}
	default:
		NS_ABORT_MSG ("Invalid UDP field.");
	}
}

Ptr<Packet>
QosController::CreateArpRequest (Mac48Address srcMac, Ipv4Address srcIp,
		Ipv4Address dstIp)
{
	NS_LOG_FUNCTION (this << srcMac << srcIp << dstIp);

	Ptr<Packet> packet = Create<Packet> ();

	// ARP header
	ArpHeader arp;
	arp.SetRequest (srcMac, srcIp, Mac48Address::GetBroadcast (), dstIp);
	packet->AddHeader (arp);

	// Ethernet header
	EthernetHeader eth (false);
	eth.SetSource (srcMac);
	eth.SetDestination (Mac48Address::GetBroadcast ());
	if (packet->GetSize () < 46)
	{
		uint8_t buffer[46];
		memset (buffer, 0, 46);
		Ptr<Packet> padd = Create<Packet> (buffer, 46 - packet->GetSize ());
		packet->AddAtEnd (padd);
	}
	eth.SetLengthType (ArpL3Protocol::PROT_NUMBER);
	packet->AddHeader (eth);

	// Ethernet trailer
	EthernetTrailer trailer;
	if (Node::ChecksumEnabled ())
	{
		trailer.EnableFcs (true);
	}
	trailer.CalcFcs (packet);
	packet->AddTrailer (trailer);

	return packet;
}

Ptr<Packet>
QosController::CreateArpReply (Mac48Address srcMac, Ipv4Address srcIp,
		Mac48Address dstMac, Ipv4Address dstIp)
{
	NS_LOG_FUNCTION (this << srcMac << srcIp << dstMac << dstIp);

	Ptr<Packet> packet = Create<Packet> ();

	// ARP header
	ArpHeader arp;
	arp.SetReply (srcMac, srcIp, dstMac, dstIp);
	packet->AddHeader (arp);

	// Ethernet header
	EthernetHeader eth (false);
	eth.SetSource (srcMac);
	eth.SetDestination (dstMac);
	if (packet->GetSize () < 46)
	{
		uint8_t buffer[46];
		memset (buffer, 0, 46);
		Ptr<Packet> padd = Create<Packet> (buffer, 46 - packet->GetSize ());
		packet->AddAtEnd (padd);
	}
	eth.SetLengthType (ArpL3Protocol::PROT_NUMBER);
	packet->AddHeader (eth);

	// Ethernet trailer
	EthernetTrailer trailer;
	if (Node::ChecksumEnabled ())
	{
		trailer.EnableFcs (true);
	}
	trailer.CalcFcs (packet);
	packet->AddTrailer (trailer);

	return packet;
}



void
QosController::shortActionOuputCreator(struct ofl_action_output* action, uint32_t outputSwitchPort, uint16_t lunghezzaMassimaDellaRisposta){
	action->header.type = OFPAT_OUTPUT;
	action->port = outputSwitchPort;
	action->max_len = lunghezzaMassimaDellaRisposta;
}

void
QosController::SaveArpEntry (Ipv4Address ipAddr, Mac48Address macAddr)
{
	std::pair<Ipv4Address, Mac48Address> entry (ipAddr, macAddr);
	std::pair <IpMacMap_t::iterator, bool> ret;
	ret = m_arpTable.insert (entry);
	if (ret.second == true)
	{
		NS_LOG_INFO ("New ARP entry: " << ipAddr << " - " << macAddr);
		return;
	}
}



Mac48Address
QosController::GetArpEntry (Ipv4Address ip)
{
	IpMacMap_t::iterator ret;
	ret = m_arpTable.find (ip);
	if (ret != m_arpTable.end ())
	{
		//std::cout << "MAC associato all' IpDest TROVATO" << std::endl;
		NS_LOG_INFO ("Found ARP entry: " << ip << " - " << ret->second);
		return ret->second;
	}
	NS_ABORT_MSG ("No ARP information for this IP.");

}

bool
QosController::ExistArpEntry (Ipv4Address ip)
{
	IpMacMap_t::iterator ret;
	ret = m_arpTable.find(ip);
	if(ret!=m_arpTable.end())
		return true;
	return false;
}

void QosController::SaveIpDestEntry(Ipv4Address address, uint64_t swtchDpId){
	std::pair<Ipv4Address,uint64_t> entry (address,swtchDpId);
	std::pair<IpSwitchMap_t::iterator,bool> ret;
	ret = m_ipDestTable.insert (entry);
	if (ret.second == true)
	{
		NS_LOG_INFO ("New IpDest entry: " << address << " - " << swtchDpId);
		return;
	}
}

uint64_t
QosController::GetIpDestEntry(Ipv4Address address){
	IpSwitchMap_t::iterator itr;
	itr = m_ipDestTable.find(address);
	if(itr!=m_ipDestTable.end()){
		NS_LOG_INFO ("Found IpDestEntry entry: " << address << " - " << itr->second);
		return itr->second;
	}
	NS_ABORT_MSG ("No IpDestEntry information for this IP: "<<address);
}

void
QosController::SaveServiceEntry(Ipv4Address address, std::list<int> weightList){
	std::pair<Ipv4Address, std::list<int>> entry (address, weightList);
	std::pair<IpServiceMap_t::iterator,bool> ret;
	ret = m_IpServiceTable.insert(entry);
	if (ret.second == true)
	{
		return;
	}
}

bool
QosController::ExistServiceEntry(Ipv4Address address){
	IpServiceMap_t::iterator itr;
	itr = m_IpServiceTable.find(address);
	if(itr!=m_IpServiceTable.end()){
		return true;
	}
	return false;
}

std::list<int>
QosController::GetServiceEntry(Ipv4Address address){
	IpServiceMap_t::iterator itr;
	itr = m_IpServiceTable.find(address);
	if(itr!=m_IpServiceTable.end()){
		NS_LOG_INFO ("Found IpService entry: " << address);
		return itr->second;
	}
	NS_ABORT_MSG ("No IpDestEntry information for this IP.");
}

bool
QosController::GetRouterConfiguration(){
	char ipEsterno[20];
	char ipInterno[20];
	int mask;

	FILE *fp;
	fp=fopen("indirizzi.txt", "r");
	if(fp==NULL) {
		printf("Errore nell'apertura del file'\n");
		return false;
	}
	else{
		int filePosition;
		filePosition = fscanf(fp,"%s %d %s", ipInterno, &mask, ipEsterno);
		while(filePosition != EOF) {
			printf("ipInterno: %s, maskInterna: %d, ipEsterno: %s\n", ipInterno, mask, ipEsterno);
			routerInfo info;
			info.esterno=ipEsterno;
			info.interno=ipInterno;
			info.mask=mask;
			l_routerInfo.push_front(info);
			filePosition = fscanf(fp,"%s %d %s", ipInterno, &mask, ipEsterno);
		}
	}
	fclose(fp);
	return true;
}


int
QosController::addFlowModToPathSwitch(std::list<uint64_t> path, Ipv4Address ipSrc, int ipSrcMask, Ipv4Address ipDst, int ipDstMask){
	std::list<uint64_t>::iterator itFrom, itTo;
	itFrom = path.begin();
	itTo = path.begin();
	++itTo;//vai al secondo argomento
	uint32_t switchFromPort;

	while(itTo!=path.end()){

		switchFromPort = g.getLinkPortSwitch(*itFrom,*itTo);
		std::cout<<"FlowMod From: "<<*itFrom<<" To: "<<*itTo<<" ByPort: "<<switchFromPort<<std::endl;
		std::ostringstream flow;
		flow << "flow-mod table=0,cmd=add "
				//<<" eth_type="<<ethernetType
				//<<",ip_prot="<<ipProtocolNumber
				<<" eth_type=0x0800"
				<<",ip_src="<<ipSrc<<"/"<<ipSrcMask
				<<",ip_dst="<<ipDst<<"/"<<ipDstMask
				<<" apply:output="<<switchFromPort;
		//<<" meter:1 apply:output="<<switchFromPort;//lo1
		DpctlExecute(GetRemoteSwitch(*itFrom),flow.str());

		std::cout<<flow.str()<<std::endl;

		++itFrom;
		++itTo;
	}
	return 1;
}




int
QosController::addFlowModToPathSwitch(std::list<uint64_t> path, Ipv4Address ipSrc, Ipv4Address ipDst, int weight){
	std::list<uint64_t>::iterator itFrom, itTo;
	itFrom = path.begin();
	itTo = path.begin();
	++itTo;//vai al secondo argomento
	uint32_t switchFromPort;

	while(itTo!=path.end()){
		switchFromPort = g.getLinkPortSwitch(*itFrom,*itTo);
		std::cout<<"FlowMod From: "<<*itFrom<<" To: "<<*itTo<<" ByPort: "<<switchFromPort<<std::endl;
		std::ostringstream flow;
		flow << "flow-mod table=0,cmd=add "
				//<<" eth_type="<<ethernetType
				//<<",ip_prot="<<ipProtocolNumber
				<<" eth_type=0x0800"
				<<",ip_src="<<ipSrc
				<<",ip_dst="<<ipDst
				<<" apply:output="<<switchFromPort;
		//<<" meter:1 apply:output="<<switchFromPort;//lo1
		DpctlExecute(GetRemoteSwitch(*itFrom),flow.str());
		++itFrom;
		++itTo;
	}
	return 1;
}

int
QosController::ServiceManagerIPbased(Graphe g, Ipv4Address ipSrc, Ipv4Address ipDst){
	std::cout<<"Dentro Service"<<std::endl;

	std::list<int> weightPath;
	//Tipo di servizio, download/upload
	if(ExistServiceEntry(ipSrc)){
		weightPath = GetServiceEntry(ipSrc);
		std::cout<<"DOWNLOAD"<<std::endl;
	}
	if(ExistServiceEntry(ipDst)){
		weightPath = GetServiceEntry(ipDst);
		std::cout<<"UPLOAD"<<std::endl;
	}


	if(weightPath.size()>0){
		std::cout<<"wightPath>0"<<std::endl;
		uint64_t vSwitchSrc, vSwitchDst;
		vSwitchSrc = GetIpDestEntry(ipSrc);
		vSwitchDst = GetIpDestEntry(ipDst);
		std::cout<<"vSwitchSrc: "<<vSwitchSrc<<std::endl;
		std::cout<<"vSwitchDst: "<<vSwitchDst<<std::endl;
		std::list<std::list<uint64_t>> listOfShortestPath;
		std::cout<<"Prima Yen"<<std::endl;
		YensSupport ys;
		listOfShortestPath = ys.kShortestPath(g,vSwitchSrc,vSwitchDst,weightPath.size());
		//listOfShortestPath = YenKShortestPath(graph,nNode,vSwitchSrc,vSwitchDst,weightPath.size());
		std::cout<<"Dopo Yen"<<std::endl;

		std::cout<<"Lunghezza lista yen: "<<listOfShortestPath.size()<<std::endl;

		std::map<int,std::list<std::pair<int,int>>> fonteDestWeight;

		std::list<int>::iterator weightPathIter = weightPath.begin();
		for(std::list<std::list<uint64_t>>::iterator itLoL = listOfShortestPath.begin(); itLoL != listOfShortestPath.end(); ++itLoL){
			if( (*weightPathIter) != 0 ){
				std::list<uint64_t>::iterator itFrom = (*itLoL).begin();
				std::list<uint64_t>::iterator itTo = (*itLoL).begin();
				++itTo;
				while(itTo != (*itLoL).end()){

					std::map<int,std::list<std::pair<int,int>>>::iterator it = fonteDestWeight.find(*itFrom);

					std::pair<int,int> nuovaCoppia ((*itTo),(*weightPathIter));

					if(it == fonteDestWeight.end()){
						//Se non esiste la fonte, la inserisce ed inserisce il primo elemento
						std::list<std::pair<int,int>> nuovaLista {nuovaCoppia};
						std::pair<int,std::list<std::pair<int,int>>> entry ((*itFrom),nuovaLista);
						fonteDestWeight.insert(entry);
					}else{
						//Se la fonte esiste, deve prendere la lista associata alla fonte e aggiungervi un elemento nuovo
						int copyOfFonte = it->first;
						std::list<std::pair<int,int>> copyOfList = it->second;
						copyOfList.push_front(nuovaCoppia);
						std::pair<int,std::list<std::pair<int,int>>> entry (copyOfFonte,copyOfList);
						//Sovrascrive al dato precedentemente contenuto
						fonteDestWeight.erase(it);
						fonteDestWeight.insert(entry);
					}
					++itFrom;
					++itTo;
				}
			}
			++weightPathIter;
		}


		std::map<int,std::list<std::pair<int,int>>>::iterator FDWiter;
		for(FDWiter = fonteDestWeight.begin(); FDWiter != fonteDestWeight.end(); ++FDWiter){
			std::ostringstream groupEntry;
			int fonteAttuale = (FDWiter->first);
			groupEntry << "group-mod cmd=add,type=sel,group="<<group_id;
			std::list<std::pair<int,int>> listaAttuale (FDWiter->second);
			for(std::list<std::pair<int,int>>::iterator iter = listaAttuale.begin(); iter != listaAttuale.end(); ++iter){
				groupEntry<< " weight=" << (*iter).second //second è il peso
						<< ",port=" << "any"
						<< ",group=" << "any"
						<< " output=" << g.getLinkPortSwitch(fonteAttuale,(*iter).first); //first è la destinazione
			}
			std::cout<<groupEntry.str()<<std::endl;
			DpctlExecute(FDWiter->first,groupEntry.str()); // first è lo switch
			std::ostringstream flowEntry;
			flowEntry << "flow-mod cmd=add,table=0,prio=20 "
					"eth_type=0x0800,ip_proto=17,ip_src="<<ipSrc<<",ip_dst="<<ipDst<<" write:group="<<group_id;
			DpctlExecute(FDWiter->first,flowEntry.str());
		}
	}else{//Altra gestione NON basata sul servizio

	}
	group_id++;
	return 1;
}

std::list<uint64_t>
QosController::shortestPath(Graphe g ,uint64_t fromSwitch, uint64_t toSwitch){
	typedef std::list<uint64_t> List;
	dijkstraResult dijRes;
	List visit;
	OrderedListLink orderedLinkList;

	std::cout<<"ActualNode: "<<fromSwitch<<std::endl;
	uint64_t actualNode = fromSwitch;
	dijRes.addFirst(actualNode);

	std::list<Link> links = g.getNode(actualNode).getLinksLink();

	orderedLinkList.multiOrderedInsert(links);

	while((visit.size()<=g.getNNodes())&&(actualNode != toSwitch)&&(actualNode!=0)){
		std::cout<<"actualNode in while: "<<actualNode<<std::endl;
		visit.push_front(actualNode);
		//Mi prendo il prossimo nodo,non vistiato, che visiterò dopo
		//è infatti il primo elemento di una lista ordinata di link
		uint64_t nextNode = 0;
		Link l;
		if(!orderedLinkList.emptyLinkList()){
			l = orderedLinkList.lowElementCopy();
			while((orderedLinkList.isIn(l.getByNode().second,visit))&&(!orderedLinkList.emptyLinkList())){
				orderedLinkList.pop_front();
				l = orderedLinkList.lowElementCopy();
			}
		}
		if(!orderedLinkList.emptyLinkList())
			nextNode = l.getByNode().second;

		std::cout<<"nextNode in while: "<< nextNode<<std::endl;
		//Aggiorno tutta la struttura dati in base all'attuale nodo analizzato
		while((!orderedLinkList.emptyLinkList())&&(nextNode!=0)){
			Link actualLink = orderedLinkList.pop_front();
			uint64_t linkDest = actualLink.getByNode().second;
			uint64_t linkWeight = actualLink.getCost();
			dijRes.update(actualNode,linkDest,linkWeight);
		}
		//preparo per analizzare il prossimo nodo
		actualNode = nextNode;
		orderedLinkList.multiOrderedInsert(g.getNode(actualNode).getLinksLink());
	}
	return dijRes.pathBy(fromSwitch,toSwitch);
}



