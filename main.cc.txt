/*
 * main.cc
 *
 *  Created on: 5 feb 2020
 *      Author: openflow
 *
 **/

#include <ns3/core-module.h>
#include <ns3/network-module.h>
#include <ns3/csma-module.h>
#include <ns3/internet-module.h>
#include <ns3/ofswitch13-module.h>
#include <ns3/internet-apps-module.h>

#include <ns3/netanim-module.h>
#include <ns3/mobility-module.h>
#include <ns3/applications-module.h>
#include "ns3/on-off-helper.h"
#include "ns3/packet-sink-helper.h"
#include "qos-controller.h"


using namespace ns3;

int
main (int argc, char *argv[])
{

	Packet::EnablePrinting ();

	/*Numero Client*/
	uint16_t nClient = 2;
	/*Numero Server*/
	uint16_t nServer = 2;
	uint64_t simTime = 20;
	//il tempo di invio e ricezione deve sempre essere inferiore al tempo di simulazione
	uint64_t timeOfSendReceive = 10;
	uint64_t totTimeOfArpGestion = 3; //Sec delay partenza noise - t primo pacchetto UDP inviato
	bool verbose = false;
	bool trace = true;

	std::string prot                 = "udp"; //protocollo usato per il dataNoise
	std::string dataNoise1            = "1Mbps"; //quanto traffico deve passare
	std::string dataNoise2            = "1Mbps";

	// Configure dedicated connections between controller and switches
	Config::SetDefault ("ns3::OFSwitch13Helper::ChannelType", EnumValue (OFSwitch13Helper::DEDICATEDCSMA));

	// Increase TCP MSS for larger packets
	Config::SetDefault ("ns3::TcpSocket::SegmentSize", UintegerValue (1400));

	// Max number of packets in queue
	Config::SetDefault ("ns3::QueueBase::MaxSize", StringValue ("20000p"));

	// Enable checksum computations (required by OFSwitch13 module)
	GlobalValue::Bind ("ChecksumEnabled", BooleanValue (true));


	// Configure command line parameters
	CommandLine cmd;
	cmd.AddValue ("simTime", "Simulation time (seconds)", simTime);
	cmd.AddValue ("verbose", "Enable verbose output", verbose);
	cmd.AddValue ("trace", "Enable datapath stats and pcap traces", trace);
	cmd.Parse (argc, argv);

	if (verbose)
	{
		OFSwitch13Helper::EnableDatapathLogs ();
		/*
		LogComponentEnable ("OFSwitch13Interface", LOG_LEVEL_ALL);
		LogComponentEnable ("OFSwitch13Device", LOG_LEVEL_ALL);
		LogComponentEnable ("OFSwitch13Port", LOG_LEVEL_ALL);
		LogComponentEnable ("OFSwitch13Queue", LOG_LEVEL_ALL);
		LogComponentEnable ("OFSwitch13SocketHandler", LOG_LEVEL_ALL);
		LogComponentEnable ("OFSwitch13Controller", LOG_LEVEL_ALL);
		LogComponentEnable ("OFSwitch13LearningController", LOG_LEVEL_ALL);
		LogComponentEnable ("OFSwitch13Helper", LOG_LEVEL_ALL);
		LogComponentEnable ("OFSwitch13InternalHelper", LOG_LEVEL_ALL);
		 */
		LogComponentEnable ("QosController", LOG_LEVEL_ALL);
	}

	// Create hosts nodes
	NodeContainer hosts;
	hosts.Create (nClient);
	//Create server nodes
	NodeContainer servers;
	servers.Create(nServer);
	//Create controller nodes
	NodeContainer controller;
	controller.Create(1); //un unico controller centralizzato

	// Create the vSwitchOvest node
	Ptr<Node> vSwitchOvest = CreateObject<Node> ();
	// Create the vSwitchEst node
	Ptr<Node> vSwitchEst = CreateObject<Node> ();
	// Create the vSwitchSud node
	Ptr<Node> vSwitchSud = CreateObject<Node> ();
	// Create the vSwitchNord node
	Ptr<Node> vSwitchNord = CreateObject<Node> ();

	NodeContainer switchContainer= CreateObject<Node>();
	switchContainer.Add(vSwitchOvest);
	switchContainer.Add(vSwitchEst);
	switchContainer.Add(vSwitchSud);
	switchContainer.Add(vSwitchNord);

	CsmaHelper csmaHelper;
	NetDeviceContainer vSwitchOvestPorts, vSwitchEstPorts, vSwitchSudPorts, vSwitchNordPorts;

	NetDeviceContainer link;

	/*---------------Connessione tra vSwitchOvest e vSwitchNord--------------------*/

	// Use the CsmaHelper to connect vSwitchOvest and vSwitchNord with 1000Mbps band

	csmaHelper.SetChannelAttribute ("DataRate", DataRateValue (DataRate ("1000Mbps")));
	csmaHelper.SetChannelAttribute ("Delay", TimeValue (MilliSeconds (0.5)));

	link = csmaHelper.Install(NodeContainer (vSwitchOvest,vSwitchNord));
	vSwitchOvestPorts.Add(link.Get(0));
	vSwitchNordPorts.Add(link.Get(1));

	/*---------------Connessione tra vSwitchOvest e vSwitchEst--------------------*/

	// Use the CsmaHelper to connect vSwitchSud and vSwitchEst with 1000Mbps band

	csmaHelper.SetChannelAttribute ("DataRate", DataRateValue (DataRate ("1000Mbps")));
	csmaHelper.SetChannelAttribute ("Delay", TimeValue (MilliSeconds (0.5)));

	link = csmaHelper.Install(NodeContainer (vSwitchOvest,vSwitchEst));
	vSwitchOvestPorts.Add(link.Get(0));
	vSwitchEstPorts.Add(link.Get(1));

	/*---------------Connessione tra vSwitchOvest e vSwitchSud--------------------*/

	// Use the CsmaHelper to connect vSwitchOvest and vSwitchSud with 1000Mbps band

	csmaHelper.SetChannelAttribute ("DataRate", DataRateValue (DataRate ("1000Mbps")));
	csmaHelper.SetChannelAttribute ("Delay", TimeValue (MilliSeconds (0.5)));

	link = csmaHelper.Install(NodeContainer (vSwitchOvest,vSwitchSud));
	vSwitchOvestPorts.Add(link.Get(0));
	vSwitchSudPorts.Add(link.Get(1));

	/*---------------Connessione tra vSwitchSud e vSwitchNord--------------------*/

	// Use the CsmaHelper to connect vSwitchSud and vSwitchNord with 1000Mbps band

	csmaHelper.SetChannelAttribute ("DataRate", DataRateValue (DataRate ("1000Mbps")));
	csmaHelper.SetChannelAttribute ("Delay", TimeValue (MilliSeconds (0.5)));

	link = csmaHelper.Install(NodeContainer (vSwitchSud,vSwitchNord));
	vSwitchSudPorts.Add(link.Get(0));
	vSwitchNordPorts.Add(link.Get(1));

	/*---------------Connessione tra vSwitchNord e vSwitchEst--------------------*/

	// Use the CsmaHelper to connect vSwitchNord and vSwitchEst with 1000Mbps band

	csmaHelper.SetChannelAttribute ("DataRate", DataRateValue (DataRate ("1000Mbps")));
	csmaHelper.SetChannelAttribute ("Delay", TimeValue (MilliSeconds (0.5)));

	link = csmaHelper.Install(NodeContainer (vSwitchNord,vSwitchEst));
	vSwitchNordPorts.Add(link.Get(0));
	vSwitchEstPorts.Add(link.Get(1));

	/*---------------Connessione tra vSwitchSud e vSwitchEst--------------------*/

	// Use the CsmaHelper to connect vSwitchSud and vSwitchEst with 1000Mbps band

	csmaHelper.SetChannelAttribute ("DataRate", DataRateValue (DataRate ("1000Mbps")));
	csmaHelper.SetChannelAttribute ("Delay", TimeValue (MilliSeconds (0.5)));

	link = csmaHelper.Install(NodeContainer (vSwitchSud,vSwitchEst));
	vSwitchSudPorts.Add(link.Get(0));
	vSwitchEstPorts.Add(link.Get(1));

	/*---------------Connessione tra tutti gli Host e lo vSwitchOvest--------------------*/

	// Use the CsmaHelper to connect Host and vSwitchOvest with 1000Mbps band
	csmaHelper.SetChannelAttribute ("DataRate", DataRateValue (DataRate ("1000Mbps")));
	csmaHelper.SetChannelAttribute ("Delay", TimeValue (MilliSeconds (0.5)));

	NetDeviceContainer hostDevicePorts; //è presente come secondo lo vSwitchOvestPorts
	for (size_t i = 0; i < nClient; i++)
	{
		link = csmaHelper.Install (NodeContainer (hosts.Get (i), vSwitchOvest));
		hostDevicePorts.Add (link.Get (0));
		vSwitchOvestPorts.Add (link.Get (1));
	}

	/*---------------Connessione tra vSwitchEst e Server--------------------*/

	// Use the CsmaHelper to connect Host and vSwitchOvest with 1000Mbps band
	csmaHelper.SetChannelAttribute ("DataRate", DataRateValue (DataRate ("1000Mbps")));
	csmaHelper.SetChannelAttribute ("Delay", TimeValue (MilliSeconds (0.5)));

	NetDeviceContainer serverDevicePorts;//è presente come primo il serverSwitchPorts

	for (size_t i = 0; i < nServer; i++)
	{
		link = csmaHelper.Install (NodeContainer (vSwitchEst, servers.Get (i)));
		vSwitchEstPorts.Add(link.Get(0));
		serverDevicePorts.Add(link.Get(1));;
	}


	/*Creazione del controller*/

	//Creazione del nostro qosController
	Ptr<QosController> qosCtrl = CreateObject<QosController> ();
	// Configure the OpenFlow network domain
	Ptr<OFSwitch13InternalHelper> ofQosHelper = CreateObject<OFSwitch13InternalHelper> ();
	//Imposto che il nostro controller è un QoSController
	ofQosHelper->InstallController (controller.Get(0),qosCtrl);
	//NON installo gli switch su ofQosHelper perché devono essere collegati al QosController per usare OpenFlow
	//ofQosHelper->InstallSwitch (vSwitchOvest, vSwitchOvestPorts);
	//ofQosHelper->InstallSwitch (vSwitchEst, vSwitchEstPorts);

	//Installiamo come device OpenFLow, i due switch che abbiamo creat
	OFSwitch13DeviceContainer ofSwitchDevices;
	ofSwitchDevices.Add (ofQosHelper->InstallSwitch (vSwitchOvest, vSwitchOvestPorts));
	ofSwitchDevices.Add (ofQosHelper->InstallSwitch (vSwitchEst, vSwitchEstPorts));
	ofSwitchDevices.Add (ofQosHelper->InstallSwitch (vSwitchSud, vSwitchSudPorts));
	ofSwitchDevices.Add (ofQosHelper->InstallSwitch (vSwitchNord, vSwitchNordPorts));

	ofQosHelper->CreateOpenFlowChannels ();

	// Install the TCP/IP stack into host and server nodes
	InternetStackHelper internet;
	internet.Install (hosts);
	internet.Install (servers);

	Ipv4AddressHelper ipv4helpr;

	// Set IPv4 hostPort addresses
	Ipv4InterfaceContainer hostIpIfaces;
	ipv4helpr.SetBase ("10.1.0.0", "255.255.0.0","0.0.2.1");
	hostIpIfaces = ipv4helpr.Assign (hostDevicePorts);

	// Set IPv4 serverPort addresses
	Ipv4InterfaceContainer serverIpIfaces;
	ipv4helpr.SetBase ("10.1.0.0", "255.255.0.0","0.0.3.1");
	serverIpIfaces = ipv4helpr.Assign (serverDevicePorts);

	Ipv4Address host0Address ("10.1.2.1");
	Ipv4Address host1Address ("10.1.2.2");
	Ipv4Address server1Address ("10.1.3.1");
	Ipv4Address server2Address ("10.1.3.2");

	std::string prot_code = "ns3::UdpSocketFactory";
	uint32_t packetSize = 512;
	if (prot=="tcp"){
		prot_code = "ns3::TcpSocketFactory";
	}

	//************ traffic generation ***********
	/*************Install SendApp and SinkApps****************/
	//Regola di invio 11 (Genera traffico verso il server1)
	InetSocketAddress noiseDest11 (server1Address, 5111);
	OnOffHelper onoff11 (prot_code, Address (noiseDest11));
	//Impone un ON del 100% e quindi un OFF dello 0%
	onoff11.SetConstantRate (DataRate (dataNoise1),packetSize);

	//Regola di invio 12 (Genera traffico verso server2)
	InetSocketAddress noiseDest12 (server2Address, 5111);
	OnOffHelper onoff12 (prot_code, Address (noiseDest12));
	//Impone un ON del 100% e quindi un OFF dello 0%
	onoff12.SetConstantRate (DataRate (dataNoise2), packetSize);


	ApplicationContainer SendApps; //Qui vanno aggiungiunte le installazioni per ogni host che invia dati
	SendApps.Add(onoff12.Install (hosts.Get (0))); //host_0 invia con regola di onoff12
	//SendApps.Add(onoff11.Install (hosts.Get (1))); //host_1 invia con regola di onoff11
	SendApps.Start (Seconds (5.0));
	SendApps.Stop (Seconds (timeOfSendReceive+5));

	ApplicationContainer SkinApps; //Qui vanno aggiunte le installazioni per ogni server che riceve
	PacketSinkHelper sink11 (prot_code, InetSocketAddress (Ipv4Address::GetAny (), 5111));
	SkinApps.Add(sink11.Install (servers.Get (0)));  //server1 riceve in base alla regola sink11
	SkinApps.Add(sink11.Install (servers.Get (1)));	//server2 riceve in base alla regola sink11
	SkinApps.Start (Seconds (0.1));
	SkinApps.Stop (Seconds (simTime));


	// Enable datapath stats and pcap traces at hosts, switch(es), and controller(s)
	if (trace)
	{
		ofQosHelper->EnableOpenFlowPcap ("openflow");
		ofQosHelper->EnableDatapathStats ("switch-stats");
		csmaHelper.EnablePcap ("switch", switchContainer, true);
		csmaHelper.EnablePcap ("hosts", hosts, true);
		csmaHelper.EnablePcap ("servers", servers, true);
		//csmaHelper.EnablePcap("controller", controller, true);
	}


	//Trace
	AsciiTraceHelper ascii;
	Ptr<OutputStreamWrapper> stream = ascii.CreateFileStream ("internet.tr");
	internet.EnableAsciiIpv4All (stream);

	// Run the simulation
	Simulator::Stop (Seconds (simTime));
	Simulator::Run ();
	Simulator::Destroy ();

	// Dump total of received bytes by sink applications

	Ptr<PacketSink> sink1 = DynamicCast<PacketSink> (SkinApps.Get (0));
	std::cout << "DataNoise1="<<dataNoise1 <<" Bytes received by server 1: " << sink1->GetTotalRx () << " ("
			<< (8. * sink1->GetTotalRx ()) / 1000000.0 / (timeOfSendReceive-totTimeOfArpGestion) << " Mbps)"
			<< std::endl;


	Ptr<PacketSink> sink2 = DynamicCast<PacketSink> (SkinApps.Get (1));
	std::cout << "DataNoise2="<<dataNoise2 <<" Bytes received by server 2: " << sink2->GetTotalRx () << " ("
			<< (8. * sink2->GetTotalRx ()) / 1000000.0 / (timeOfSendReceive-totTimeOfArpGestion) << " Mbps)"
			<< std::endl;

}




